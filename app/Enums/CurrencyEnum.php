<?php

namespace App\Enums;

use Illuminate\Support\Number;

enum CurrencyEnum: string
{
    case EUR = 'EUR';
    case USD = 'USD';
    case GBP = 'GBP';
    case JPY = 'JPY';
    case CHF = 'CHF';
    case CAD = 'CAD';
    case AUD = 'AUD';
    case CNY = 'CNY';
    case INR = 'INR';
    case BRL = 'BRL';
    case RUB = 'RUB';
    case KRW = 'KRW';
    case MXN = 'MXN';
    case SGD = 'SGD';
    case NZD = 'NZD';
    case HKD = 'HKD';
    case SEK = 'SEK';
    case NOK = 'NOK';
    case DKK = 'DKK';
    case TRY = 'TRY';
    case ZAR = 'ZAR';
    case AED = 'AED';
    case PLN = 'PLN';
    case SAR = 'SAR';

    public function symbol(): string
    {
        return match ($this) {
            self::EUR => 'â‚¬',
            self::USD, self::CAD, self::AUD, self::SGD, self::NZD, self::HKD => '$',
            self::GBP => 'Â£',
            self::JPY => 'Â¥',
            self::CHF => 'CHF',
            self::CNY => 'Â¥',
            self::INR => 'â‚¹',
            self::BRL => 'R$',
            self::RUB => 'â‚½',
            self::KRW => 'â‚©',
            self::MXN => '$',
            self::SEK, self::DKK, self::NOK => 'kr',
            self::TRY => 'â‚º',
            self::ZAR => 'R',
            self::AED => 'Ø¯.Ø¥',
            self::PLN => 'zÅ‚',
            self::SAR => 'ï·¼',
        };
    }

    public function symbolWithIndicator(): string
    {
        return match ($this) {
            self::EUR => 'â‚¬',
            self::USD => '$',
            self::CAD => 'CA$',
            self::AUD => 'A$',
            self::SGD => 'S$',
            self::NZD => 'NZ$',
            self::HKD => 'HK$',
            self::GBP => 'Â£',
            self::JPY => 'Â¥',
            self::CHF => 'CHF',
            self::CNY => 'Â¥',
            self::INR => 'â‚¹',
            self::BRL => 'R$',
            self::RUB => 'â‚½',
            self::KRW => 'â‚©',
            self::MXN => 'MX$',
            self::SEK => 'SEK',
            self::DKK => 'DKK',
            self::NOK => 'NOK',
            self::TRY => 'â‚º',
            self::ZAR => 'R',
            self::AED => 'AED',
            self::PLN => 'zÅ‚',
            self::SAR => 'SAR',
        };
    }

    public function name(): string
    {
        return match ($this) {
            self::EUR => 'Euro',
            self::USD => 'Dollar amÃ©ricain',
            self::GBP => 'Livre sterling',
            self::JPY => 'Yen japonais',
            self::CHF => 'Franc suisse',
            self::CAD => 'Dollar canadien',
            self::AUD => 'Dollar australien',
            self::CNY => 'Yuan chinois',
            self::INR => 'Roupie indienne',
            self::BRL => 'Real brÃ©silien',
            self::RUB => 'Rouble russe',
            self::KRW => 'Won sud-corÃ©en',
            self::MXN => 'Peso mexicain',
            self::SGD => 'Dollar de Singapour',
            self::NZD => 'Dollar nÃ©o-zÃ©landais',
            self::HKD => 'Dollar de Hong Kong',
            self::SEK => 'Couronne suÃ©doise',
            self::NOK => 'Couronne norvÃ©gienne',
            self::DKK => 'Couronne danoise',
            self::TRY => 'Livre turque',
            self::ZAR => 'Rand sud-africain',
            self::AED => 'Dirham des Ã‰mirats',
            self::PLN => 'ZÅ‚oty polonais',
            self::SAR => 'Riyal saoudien',
        };
    }

    public function flag(): string
    {
        return match ($this) {
            self::EUR => 'ðŸ‡ªðŸ‡º',
            self::USD => 'ðŸ‡ºðŸ‡¸',
            self::GBP => 'ðŸ‡¬ðŸ‡§',
            self::JPY => 'ðŸ‡¯ðŸ‡µ',
            self::CHF => 'ðŸ‡¨ðŸ‡­',
            self::CAD => 'ðŸ‡¨ðŸ‡¦',
            self::AUD => 'ðŸ‡¦ðŸ‡º',
            self::CNY => 'ðŸ‡¨ðŸ‡³',
            self::INR => 'ðŸ‡®ðŸ‡³',
            self::BRL => 'ðŸ‡§ðŸ‡·',
            self::RUB => 'ðŸ‡·ðŸ‡º',
            self::KRW => 'ðŸ‡°ðŸ‡·',
            self::MXN => 'ðŸ‡²ðŸ‡½',
            self::SGD => 'ðŸ‡¸ðŸ‡¬',
            self::NZD => 'ðŸ‡³ðŸ‡¿',
            self::HKD => 'ðŸ‡­ðŸ‡°',
            self::SEK => 'ðŸ‡¸ðŸ‡ª',
            self::NOK => 'ðŸ‡³ðŸ‡´',
            self::DKK => 'ðŸ‡©ðŸ‡°',
            self::TRY => 'ðŸ‡¹ðŸ‡·',
            self::ZAR => 'ðŸ‡¿ðŸ‡¦',
            self::AED => 'ðŸ‡¦ðŸ‡ª',
            self::PLN => 'ðŸ‡µðŸ‡±',
            self::SAR => 'ðŸ‡¸ðŸ‡¦',
        };
    }

    public function labelWithEmoji(): string
    {
        return $this->flag().'&nbsp;&nbsp;'.$this->value.' - '.$this->symbolWithIndicator();
    }

    public function format(float $amount, string $locale = 'fr_FR'): string
    {
        return Number::currency($amount, $this->value, locale: $locale);
    }

    public static function getCurrencyOptions(): array
    {
        $options = [];
        foreach (self::cases() as $case) {
            $options[$case->value] = $case->value.' - '.$case->name();
        }

        return $options;
    }

    public static function getCurrencyOptionsWithEmojis(): array
    {
        $options = [];
        foreach (self::cases() as $case) {
            $options[$case->value] = $case->labelWithEmoji();
        }

        return $options;
    }
}
